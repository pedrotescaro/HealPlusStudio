/**
 * @fileoverview Firestore Security Rules for HealPlus Application
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only
 * access their own profile and associated data (wounds, images, appointments,
 * and risk assessments).
 *
 * Data Structure:
 * All data is nested under /users/{userId}. This hierarchical structure ensures
 * that all data access can be controlled via path-based rules, simplifying
 * security logic and improving performance.
 *
 * Key Security Decisions:
 * - Users can only create their own user profile with a matching userId.
 * - All subcollections under /users/{userId} inherit ownership.
 * - Data validation is relaxed during prototyping to enable rapid iteration
 *   but critical relational integrity checks are still performed.
 *
 * Denormalization for Authorization:
 * The data structure inherently supports authorization independence via path-based ownership. No denormalization is needed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) - Authenticated user can read their own profile.
     * @allow (update, delete) - Authenticated user can update/delete their own profile.
     * @deny (create) - An unauthenticated user cannot create a profile.
     * @deny (update, delete) - A different authenticated user cannot update/delete this profile.
     * @principle Enforces document ownership for all operations.  Validates userId on create.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to wound documents for a specific user.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) - Authenticated user can create a wound under their profile.
     * @allow (get, list) - Authenticated user can read wounds under their profile.
     * @allow (update, delete) - Authenticated user can update/delete wounds under their profile.
     * @deny (create) - An unauthenticated user cannot create a wound.
     * @deny (update, delete) - A different authenticated user cannot update/delete this wound.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to wound image documents for a specific wound of a user.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) - Authenticated user can create a wound image under their wound.
     * @allow (get, list) - Authenticated user can read wound images under their wound.
     * @allow (update, delete) - Authenticated user can update/delete wound images under their wound.
     * @deny (create) - An unauthenticated user cannot create a wound image.
     * @deny (update, delete) - A different authenticated user cannot update/delete this wound image.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to appointment documents for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - Authenticated user can create an appointment under their profile.
     * @allow (get, list) - Authenticated user can read appointments under their profile.
     * @allow (update, delete) - Authenticated user can update/delete appointments under their profile.
     * @deny (create) - An unauthenticated user cannot create an appointment.
     * @deny (update, delete) - A different authenticated user cannot update/delete this appointment.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to risk assessment documents for a specific wound of a user.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) - Authenticated user can create a risk assessment under their wound.
     * @allow (get, list) - Authenticated user can read risk assessments under their wound.
     * @allow (update, delete) - Authenticated user can update/delete risk assessments under their wound.
     * @deny (create) - An unauthenticated user cannot create a risk assessment.
     * @deny (update, delete) - A different authenticated user cannot update/delete this risk assessment.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}