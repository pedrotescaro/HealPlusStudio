rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile information. Only the authenticated user can read, update, or delete their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with ID matching the userId can create their profile.
     * @allow (get, update, delete) - Authenticated user with ID matching the userId can get, update and delete their profile.
     * @deny (create) - Authenticated user tries to create a profile with a userId that does not match their own.
     * @deny (get, update, delete) - Authenticated user tries to get, update or delete a profile with a userId that does not match their own.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to wound data for a specific user. Only the authenticated user can read, create, update, or delete their own wound data.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) - Authenticated user with ID matching the userId can create wound data under their profile.
     * @allow (get, list, update, delete) - Authenticated user with ID matching the userId can get, list, update and delete wound data under their profile.
     * @deny (create) - Authenticated user tries to create wound data under a userId that does not match their own.
     * @deny (get, list, update, delete) - Authenticated user tries to get, list, update or delete wound data under a userId that does not match their own.
     * @principle Restricts access to a user's own data tree. Enforces document ownership for writes.
     */
    match /users/{userId}/wounds/{woundId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to wound images for a specific wound and user. Only the authenticated user can read, create, update, or delete their own wound images.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) - Authenticated user with ID matching the userId can create a wound image under their profile and wound.
     * @allow (get, list, update, delete) - Authenticated user with ID matching the userId can get, list, update and delete a wound image under their profile and wound.
     * @deny (create) - Authenticated user tries to create a wound image under a userId that does not match their own.
     * @deny (get, list, update, delete) - Authenticated user tries to get, list, update or delete a wound image under a userId that does not match their own.
     * @principle Restricts access to a user's own data tree. Enforces document ownership for writes.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to appointment data for a specific user. Only the authenticated user can read, create, update, or delete their own appointment data.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - Authenticated user with ID matching the userId can create appointment data under their profile.
     * @allow (get, list, update, delete) - Authenticated user with ID matching the userId can get, list, update and delete appointment data under their profile.
     * @deny (create) - Authenticated user tries to create appointment data under a userId that does not match their own.
     * @deny (get, list, update, delete) - Authenticated user tries to get, list, update or delete appointment data under a userId that does not match their own.
     * @principle Restricts access to a user's own data tree. Enforces document ownership for writes.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages access to risk assessment data for a specific wound and user. Only the authenticated user can read, create, update, or delete their own risk assessment data.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) - Authenticated user with ID matching the userId can create risk assessment data under their profile and wound.
     * @allow (get, list, update, delete) - Authenticated user with ID matching the userId can get, list, update and delete risk assessment data under their profile and wound.
     * @deny (create) - Authenticated user tries to create risk assessment data under a userId that does not match their own.
     * @deny (get, list, update, delete) - Authenticated user tries to get, list, update or delete risk assessment data under a userId that does not match their own.
     * @principle Restricts access to a user's own data tree. Enforces document ownership for writes.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}