/**
 * @fileoverview Firestore Security Rules for HealPlus application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model. Each user has complete control over their profile and associated data,
 * including wounds, images, appointments, and risk assessments. Data access is restricted to the authenticated user who owns the data.
 *
 * Data Structure:
 * All data is nested under the /users/{userId} collection. Each user has a dedicated data tree, ensuring data isolation and clear ownership.
 * - /users/{userId}: User profile information.
 * - /users/{userId}/wounds/{woundId}: Wound details for a specific user.
 * - /users/{userId}/wounds/{woundId}/images/{imageId}: Images associated with a wound.
 * - /users/{userId}/appointments/{appointmentId}: User's appointments.
 * - /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}: Risk assessments for wounds.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to protect user privacy.
 * - The rules leverage path-based authorization, meaning the user ID is derived from the Firestore path.
 * - All write operations (create, update, delete) require the user to be the owner of the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a function to check if the request is made by a signed-in user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a function to check if the request is made by the owner of the document.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines a function to check if the request is made by the existing owner of the document,
     *              and also confirms that the resource exists to prevent accidental operations on non-existent documents.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Security rules for user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile.
     *     Request: { auth: { uid: 'user123' }, resource.data: { id: 'user123', ... } }
     * @allow (get) User with ID 'user123' can read their profile.
     *     Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' can update their profile.
     *     Request: { auth: { uid: 'user123' }, resource.data: { id: 'user123', ... } }
     * @allow (delete) User with ID 'user123' can delete their profile.
     *     Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot create a profile for 'user123'.
     *     Request: { auth: { uid: 'user456' }, resource.data: { id: 'user123', ... } }
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for wounds.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) User with ID 'user123' can create a wound for themselves.
     *     Request: { auth: { uid: 'user123' }, resource.data: { userId: 'user123', ... } }
     * @allow (get) User with ID 'user123' can read their own wound data.
     *     Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' can update their own wound data.
     *     Request: { auth: { uid: 'user123' }, resource.data: { userId: 'user123', ... } }
     * @allow (delete) User with ID 'user123' can delete their own wound data.
     *     Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot create a wound for 'user123'.
     *     Request: { auth: { uid: 'user456' }, resource.data: { userId: 'user123', ... } }
     * @principle Enforces document ownership for all operations on wound data.
     */
    match /users/{userId}/wounds/{woundId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for wound images.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) User with ID 'user123' can create a wound image for their wound.
     *     Request: { auth: { uid: 'user123' }, resource.data: { woundId: 'wound123', ... } }
     * @allow (get) User with ID 'user123' can read their own wound image data.
     *     Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' can update their own wound image data.
     *     Request: { auth: { uid: 'user123' }, resource.data: { woundId: 'wound123', ... } }
     * @allow (delete) User with ID 'user123' can delete their own wound image data.
     *     Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot create a wound image for 'user123'.
     *     Request: { auth: { uid: 'user456' }, resource.data: { woundId: 'wound123', ... } }
     * @principle Enforces document ownership for all operations on wound image data.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User with ID 'user123' can create an appointment for themselves.
     *     Request: { auth: { uid: 'user123' }, resource.data: { userId: 'user123', ... } }
     * @allow (get) User with ID 'user123' can read their own appointment data.
     *     Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' can update their own appointment data.
     *     Request: { auth: { uid: 'user123' }, resource.data: { userId: 'user123', ... } }
     * @allow (delete) User with ID 'user123' can delete their own appointment data.
     *     Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot create an appointment for 'user123'.
     *     Request: { auth: { uid: 'user456' }, resource.data: { userId: 'user123', ... } }
     * @principle Enforces document ownership for all operations on appointment data.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Security rules for risk assessments.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) User with ID 'user123' can create a risk assessment for their wound.
     *     Request: { auth: { uid: 'user123' }, resource.data: { woundId: 'wound123', ... } }
     * @allow (get) User with ID 'user123' can read their own risk assessment data.
     *     Request: { auth: { uid: 'user123' } }
     * @allow (update) User with ID 'user123' can update their own risk assessment data.
     *     Request: { auth: { uid: 'user123' }, resource.data: { woundId: 'wound123', ... } }
     * @allow (delete) User with ID 'user123' can delete their own risk assessment data.
     *     Request: { auth: { uid: 'user123' } }
     * @deny (create) User with ID 'user456' cannot create a risk assessment for 'user123'.
     *     Request: { auth: { uid: 'user456' }, resource.data: { woundId: 'wound123', ... } }
     * @principle Enforces document ownership for all operations on risk assessment data.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}