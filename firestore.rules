/**
 * @file Firestore Security Rules for HealPlus Application
 * @description This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a hierarchical data organization.
 *   - /users/{userId}: Contains user profile information.
 *   - /users/{userId}/wounds/{woundId}: Contains wound data for a user.
 *   - /users/{userId}/wounds/{woundId}/images/{imageId}: Stores images associated with a specific wound.
 *   - /users/{userId}/appointments/{appointmentId}: Contains appointment data for a user.
 *   - /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}: Stores risk assessments for wounds.
 *
 * Key Security Decisions:
 * - User listing is disabled to protect user privacy.
 * - All data access is based on path-based ownership, simplifying the rules and improving performance.
 * - No data validation is performed beyond ensuring ownership and existence checks for updates and deletes, allowing for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile documents. Only the owner can read and write their profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their profile.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user123'
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their profile.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user123' attempts to create a profile with ID 'user456'.
     *   - request.auth.uid: 'user123'
     *   - request.resource.data.id: 'user456'
     * @deny (get, update, delete) User with ID 'user456' attempts to read/update/delete user 'user123' profile.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to wound documents for a specific user. Only the owner can read and write their wounds.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) User with ID 'user123' creates a wound.
     *   - request.auth.uid: 'user123'
     * @allow (get, list, update, delete) User with ID 'user123' reads/lists/updates/deletes their wounds.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' attempts to create a wound under user 'user123'.
     *   - request.auth.uid: 'user456'
     * @deny (get, list, update, delete) User with ID 'user456' attempts to read/list/update/delete wounds of user 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to wound images for a specific wound and user. Only the owner can read and write wound images.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) User with ID 'user123' creates a wound image.
     *   - request.auth.uid: 'user123'
     * @allow (get, list, update, delete) User with ID 'user123' reads/lists/updates/deletes their wound images.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' attempts to create a wound image under user 'user123'.
     *   - request.auth.uid: 'user456'
     * @deny (get, list, update, delete) User with ID 'user456' attempts to read/list/update/delete wound images of user 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to appointment documents for a specific user. Only the owner can read and write their appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User with ID 'user123' creates an appointment.
     *   - request.auth.uid: 'user123'
     * @allow (get, list, update, delete) User with ID 'user123' reads/lists/updates/deletes their appointments.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' attempts to create an appointment under user 'user123'.
     *   - request.auth.uid: 'user456'
     * @deny (get, list, update, delete) User with ID 'user456' attempts to read/list/update/delete appointments of user 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to risk assessment documents for a specific wound and user. Only the owner can read and write risk assessments.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) User with ID 'user123' creates a risk assessment.
     *   - request.auth.uid: 'user123'
     * @allow (get, list, update, delete) User with ID 'user123' reads/lists/updates/deletes their risk assessments.
     *   - request.auth.uid: 'user123'
     * @deny (create) User with ID 'user456' attempts to create a risk assessment under user 'user123'.
     *   - request.auth.uid: 'user456'
     * @deny (get, list, update, delete) User with ID 'user456' attempts to read/list/update/delete risk assessments of user 'user123'.
     *   - request.auth.uid: 'user456'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}