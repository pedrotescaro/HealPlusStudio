rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId The user ID to compare against the request's authentication UID.
     * @return {bool} True if the user ID matches the request's authentication UID, false otherwise.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of an existing resource.
     * @param {string} userId The user ID to compare against the resource's user ID.
     * @return {bool} True if the user ID matches the resource's user ID and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Checks if a user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Rules for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (create) User with UID 'user123' can create their profile at /users/user123.
     * @deny (create) User with UID 'user123' cannot create profile at /users/anotherUser.
     * @allow (get) User with UID 'user123' can get their profile at /users/user123.
     * @deny (get) User with UID 'user123' cannot get profile at /users/anotherUser.
     * @allow (update) User with UID 'user123' can update their profile at /users/user123.
     * @deny (update) User with UID 'user123' cannot update profile at /users/anotherUser.
     * @allow (delete) User with UID 'user123' can delete their profile at /users/user123.
     * @deny (delete) User with UID 'user123' cannot delete profile at /users/anotherUser.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/wounds/{woundId} collection.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) User with UID 'user123' can create a wound at /users/user123/wounds/wound456.
     * @deny (create) User with UID 'user123' cannot create a wound at /users/anotherUser/wounds/wound456.
     * @allow (get) User with UID 'user123' can get their wound at /users/user123/wounds/wound456.
     * @deny (get) User with UID 'user123' cannot get wound at /users/anotherUser/wounds/wound456.
     * @allow (update) User with UID 'user123' can update their wound at /users/user123/wounds/wound456.
     * @deny (update) User with UID 'user123' cannot update wound at /users/anotherUser/wounds/wound456.
     * @allow (delete) User with UID 'user123' can delete their wound at /users/user123/wounds/wound456.
     * @deny (delete) User with UID 'user123' cannot delete wound at /users/anotherUser/wounds/wound456.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/wounds/{woundId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/wounds/{woundId}/images/{imageId} collection.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) User with UID 'user123' can create an image at /users/user123/wounds/wound456/images/image789.
     * @deny (create) User with UID 'user123' cannot create an image at /users/anotherUser/wounds/wound456/images/image789.
     * @allow (get) User with UID 'user123' can get their image at /users/user123/wounds/wound456/images/image789.
     * @deny (get) User with UID 'user123' cannot get image at /users/anotherUser/wounds/wound456/images/image789.
     * @allow (update) User with UID 'user123' can update their image at /users/user123/wounds/wound456/images/image789.
     * @deny (update) User with UID 'user123' cannot update image at /users/anotherUser/wounds/wound456/images/image789.
     * @allow (delete) User with UID 'user123' can delete their image at /users/user123/wounds/wound456/images/image789.
     * @deny (delete) User with UID 'user123' cannot delete image at /users/anotherUser/wounds/wound456/images/image789.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/appointments/{appointmentId} collection.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User with UID 'user123' can create an appointment at /users/user123/appointments/appt456.
     * @deny (create) User with UID 'user123' cannot create an appointment at /users/anotherUser/appointments/appt456.
     * @allow (get) User with UID 'user123' can get their appointment at /users/user123/appointments/appt456.
     * @deny (get) User with UID 'user123' cannot get appointment at /users/anotherUser/appointments/appt456.
     * @allow (update) User with UID 'user123' can update their appointment at /users/user123/appointments/appt456.
     * @deny (update) User with UID 'user123' cannot update appointment at /users/anotherUser/appointments/appt456.
     * @allow (delete) User with UID 'user123' can delete their appointment at /users/user123/appointments/appt456.
     * @deny (delete) User with UID 'user123' cannot delete appointment at /users/anotherUser/appointments/appt456.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Rules for the /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} collection.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) User with UID 'user123' can create a risk assessment at /users/user123/wounds/wound456/riskAssessments/risk789.
     * @deny (create) User with UID 'user123' cannot create a risk assessment at /users/anotherUser/wounds/wound456/riskAssessments/risk789.
     * @allow (get) User with UID 'user123' can get their risk assessment at /users/user123/wounds/wound456/riskAssessments/risk789.
     * @deny (get) User with UID 'user123' cannot get risk assessment at /users/anotherUser/wounds/wound456/riskAssessments/risk789.
     * @allow (update) User with UID 'user123' can update their risk assessment at /users/user123/wounds/wound456/riskAssessments/risk789.
     * @deny (update) User with UID 'user123' cannot update risk assessment at /users/anotherUser/wounds/wound456/riskAssessments/risk789.
     * @allow (delete) User with UID 'user123' can delete their risk assessment at /users/user123/wounds/wound456/riskAssessments/risk789.
     * @deny (delete) User with UID 'user123' cannot delete risk assessment at /users/anotherUser/wounds/wound456/riskAssessments/risk789.
     * @principle Enforces document ownership for writes and reads.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    // Allow server to bypass security rules
    match /admin/{document=**} {
      allow read, write: if request.auth.uid == "service-account";
    }
  }
}