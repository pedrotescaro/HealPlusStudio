/**
 * @fileoverview Firestore Security Rules for the HealPlus application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has complete control over their own data tree, and no access to other users' data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a clear ownership hierarchy. This enables simple, path-based security rules.
 *  - /users/{userId}: User profile information.
 *  - /users/{userId}/wounds/{woundId}: Wound tracking data.
 *  - /users/{userId}/wounds/{woundId}/images/{imageId}: Wound images.
 *  - /users/{userId}/appointments/{appointmentId}: Healthcare appointments.
 *  - /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}: Risk assessments for wounds.
 *
 * Key Security Decisions:
 * - Users can only access data under their own userId.
 * - Listing operations are restricted to the owner of the user subcollection.
 * - No data is publicly accessible.
 *
 * Denormalization for Authorization:
 *  - Not required. The path-based structure inherently provides the necessary ownership context.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Allow a user to create their own profile.
     * @allow (get, list, update, delete) Allow the owner to read, update, and delete their profile.
     * @deny (create) Deny creation if the user ID in the data doesn't match the authenticated user's ID.
     * @deny (get, list, update, delete) Deny access to other users' profiles.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No listing of all users
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to wound data for a specific user.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) Allow a user to create a wound entry under their profile.
     * @allow (get, list, update, delete) Allow the owner to read, update, and delete their wound entries.
     * @deny (create) Deny creation if the user ID in the path doesn't match the authenticated user's ID.
     * @deny (get, list, update, delete) Deny access to other users' wound data.
     * @principle Enforces document ownership within a user's data tree.
     */
    match /users/{userId}/wounds/{woundId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to wound image data for a specific user's wound.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) Allow a user to create a wound image entry under their wound.
     * @allow (get, list, update, delete) Allow the owner to read, update, and delete their wound image entries.
     * @deny (create) Deny creation if the user ID in the path doesn't match the authenticated user's ID.
     * @deny (get, list, update, delete) Deny access to other users' wound image data.
     * @principle Enforces document ownership within a user's data tree.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to appointment data for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) Allow a user to create an appointment entry under their profile.
     * @allow (get, list, update, delete) Allow the owner to read, update, and delete their appointment entries.
     * @deny (create) Deny creation if the user ID in the path doesn't match the authenticated user's ID.
     * @deny (get, list, update, delete) Deny access to other users' appointment data.
     * @principle Enforces document ownership within a user's data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to risk assessment data for a specific user's wound.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) Allow a user to create a risk assessment entry under their wound.
     * @allow (get, list, update, delete) Allow the owner to read, update, and delete their risk assessment entries.
     * @deny (create) Deny creation if the user ID in the path doesn't match the authenticated user's ID.
     * @deny (get, list, update, delete) Deny access to other users' risk assessment data.
     * @principle Enforces document ownership within a user's data tree.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}