/**
 * @fileoverview Firestore Security Rules for the HealPlus application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has complete control over their own data tree,
 * and no user can access or modify another user's data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, creating a clear hierarchical structure that simplifies security rules.
 *  - /users/{userId}: User profile information.
 *  - /users/{userId}/wounds/{woundId}: Wound data for a specific user.
 *  - /users/{userId}/wounds/{woundId}/images/{imageId}: Wound images for a specific wound.
 *  - /users/{userId}/appointments/{appointmentId}: Appointment data for a specific user.
 *  - /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}: Risk assessments for wounds.
 *
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - All writes are validated against the authenticated user's ID to prevent data manipulation.
 *
 * Denormalization for Authorization:
 * - The data structure inherently uses path-based authorization. This avoids any get() calls for checking permissions.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profile data. Only the owner can read/write their profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile document if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete their profile document.
     * @deny (create) - User with UID 'otherUser' cannot create a profile document for 'user123'.
     * @deny (update, delete) - User with UID 'otherUser' cannot update or delete the profile document for 'user123'.
     * @principle Enforces document ownership.  Allows self-creation.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure wound data. Only the owner can read/write wounds under their profile.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) - User with UID 'user123' can create a wound document under their profile.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete wound documents under their profile.
     * @deny (create) - User with UID 'otherUser' cannot create a wound document under 'user123' profile.
     * @deny (update, delete) - User with UID 'otherUser' cannot update or delete wound documents under 'user123' profile.
     * @principle Enforces document ownership within a user-specific subcollection.
     */
    match /users/{userId}/wounds/{woundId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure wound image data. Only the owner can read/write wound images under their wound.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) - User with UID 'user123' can create a wound image document under their wound.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete wound image documents under their wound.
     * @deny (create) - User with UID 'otherUser' cannot create a wound image document under 'user123' wound.
     * @deny (update, delete) - User with UID 'otherUser' cannot update or delete wound image documents under 'user123' wound.
     * @principle Enforces document ownership within nested user-specific subcollections.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure appointment data. Only the owner can read/write appointments under their profile.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User with UID 'user123' can create an appointment document under their profile.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete appointment documents under their profile.
     * @deny (create) - User with UID 'otherUser' cannot create an appointment document under 'user123' profile.
     * @deny (update, delete) - User with UID 'otherUser' cannot update or delete appointment documents under 'user123' profile.
     * @principle Enforces document ownership within a user-specific subcollection.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure risk assessment data. Only the owner can read/write risk assessments under their wound.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) - User with UID 'user123' can create a risk assessment document under their wound.
     * @allow (get, list, update, delete) - User with UID 'user123' can read, list, update, or delete risk assessment documents under their wound.
     * @deny (create) - User with UID 'otherUser' cannot create a risk assessment document under 'user123' wound.
     * @deny (update, delete) - User with UID 'otherUser' cannot update or delete risk assessment documents under 'user123' wound.
     * @principle Enforces document ownership within nested user-specific subcollections.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}