/**
 * @file Firestore Security Rules for HealPlus Application
 * @core_philosophy This ruleset enforces a strict user-ownership model, where users can only access their own data.
 * @data_structure All data is nested under /users/{userId}, creating a clear hierarchy for data ownership.
 * @key_security_decisions User listing is disallowed for privacy.  Write access is strictly controlled by the `isOwner()` function, which verifies that the authenticated user ID matches the userId in the path.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param userId The user ID to compare against the authenticated user ID.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user owns the existing document.
     * @param userId The user ID to compare against the authenticated user ID.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Enforces ownership on the /users/{userId} document.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their own profile.
     * @deny (create) User with ID 'user123' cannot create profile for 'otherUser'.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Disallow listing all users for privacy.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership on the /users/{userId}/wounds/{woundId} document.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) User with ID 'user123' can create a wound under their profile.
     * @deny (create) User with ID 'user123' cannot create a wound under 'otherUser's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wounds/{woundId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership on the /users/{userId}/wounds/{woundId}/images/{imageId} document.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) User with ID 'user123' can create a wound image under their wound.
     * @deny (create) User with ID 'user123' cannot create a wound image under someone else's wound.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership on the /users/{userId}/appointments/{appointmentId} document.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User with ID 'user123' can create an appointment under their profile.
     * @deny (create) User with ID 'user123' cannot create an appointment under 'otherUser's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces ownership on the /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} document.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) User with ID 'user123' can create a risk assessment under their wound.
     * @deny (create) User with ID 'user123' cannot create a risk assessment under someone else's wound.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}