/**
 * @fileOverview
 * This ruleset enforces a strict user-ownership model for all data within the HealPlus application.
 * All data is nested under /users/{userId}, ensuring that users can only access their own information.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/wounds/{woundId}: Stores wound information for a specific user.
 * - /users/{userId}/wounds/{woundId}/images/{imageId}: Stores images associated with a specific wound.
 * - /users/{userId}/appointments/{appointmentId}: Stores appointment information for a specific user.
 * - /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}: Stores risk assessments for a specific wound.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile data.
 * - All subcollections under /users/{userId} inherit ownership.
 * - No public listing of user data is allowed.
 * - Data validation is minimal to facilitate rapid prototyping.  Only ownership and relational integrity are validated.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get, list) if the user is signed in.
     * @allow (create, update, delete) if the authenticated user's UID matches the userId.
     * @deny (create, update, delete) if the authenticated user's UID does not match the userId.
     * @principle Enforces document ownership for writes; requires authentication for reads.
     */
    match /users/{userId} {
      // Function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Function to check if the request is made by the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);

      /**
       * @description Controls access to wound information for a specific user.
       * @path /users/{userId}/wounds/{woundId}
       * @allow (get, list) if the authenticated user's UID matches the userId.
       * @allow (create, update, delete) if the authenticated user's UID matches the userId.
       * @deny (create, update, delete) if the authenticated user's UID does not match the userId.
       * @principle Enforces document ownership for all operations.
       */
      match /wounds/{woundId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);

        /**
         * @description Controls access to images associated with a specific wound for a user.
         * @path /users/{userId}/wounds/{woundId}/images/{imageId}
         * @allow (get, list) if the authenticated user's UID matches the userId.
         * @allow (create, update, delete) if the authenticated user's UID matches the userId.
         * @deny (create, update, delete) if the authenticated user's UID does not match the userId.
         * @principle Enforces document ownership for all operations.
         */
        match /images/{imageId} {
          allow get: if isOwner(userId);
          allow list: if isOwner(userId);
          allow create: if isOwner(userId);
          allow update: if isOwner(userId);
          allow delete: if isOwner(userId);
        }

          /**
           * @description Controls access to risk assessments for a specific wound, associated with a user.
           * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
           * @allow (get, list) if the authenticated user's UID matches the userId.
           * @allow (create, update, delete) if the authenticated user's UID matches the userId.
           * @deny (create, update, delete) if the authenticated user's UID does not match the userId.
           * @principle Enforces document ownership for all operations.
           */
        match /riskAssessments/{riskAssessmentId} {
            allow get: if isOwner(userId);
            allow list: if isOwner(userId);
            allow create: if isOwner(userId);
            allow update: if isOwner(userId);
            allow delete: if isOwner(userId);
          }
      }

      /**
       * @description Controls access to appointment information for a specific user.
       * @path /users/{userId}/appointments/{appointmentId}
       * @allow (get, list) if the authenticated user's UID matches the userId.
       * @allow (create, update, delete) if the authenticated user's UID matches the userId.
       * @deny (create, update, delete) if the authenticated user's UID does not match the userId.
       * @principle Enforces document ownership for all operations.
       */
      match /appointments/{appointmentId} {
        allow get: if isOwner(userId);
        allow list: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update: if isOwner(userId);
        allow delete: if isOwner(userId);
      }
    }
  }
}