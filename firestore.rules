/**
 * @fileoverview Firestore Security Rules for the HealPlus application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Each user has full control over their own profile and associated data (wounds, images, appointments, and risk assessments).
 *
 * Data Structure:
 * All data is nested under `/users/{userId}`. This hierarchical structure simplifies authorization rules and ensures that users can only access their own data.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only access data (wounds, images, appointments, risk assessments) nested under their own user ID.
 * - List operations are restricted to the owner of the data.
 *
 * Denormalization for Authorization:
 * The data model leverages path-based authorization, where the user ID is embedded in the document path. This avoids the need for denormalization or additional `get()` calls in the security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to user profile information.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile at /users/user_abc if the ID field matches.
     * @allow (get, update, delete) - User with UID 'user_abc' can read, update, and delete their profile at /users/user_abc.
     * @deny (create) - User with UID 'user_def' cannot create a profile at /users/user_abc.
     * @deny (get, update, delete) - User with UID 'user_def' cannot read, update, or delete the profile at /users/user_abc.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      // Function to check if the request is from the owner of the user profile.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the request is from the owner of an existing user profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to wound information for a specific user.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) - User with UID 'user_abc' can create a wound document under /users/user_abc/wounds/{woundId}.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete wound documents under /users/user_abc/wounds/{woundId}.
     * @deny (create) - User with UID 'user_def' cannot create a wound document under /users/user_abc/wounds/{woundId}.
     * @deny (get, list, update, delete) - User with UID 'user_def' cannot read, list, update, or delete wound documents under /users/user_abc/wounds/{woundId}.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/wounds/{woundId} {
      // Function to check if the request is from the owner of the user profile.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the request is from the owner of an existing user profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to wound images associated with a specific wound for a user.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) - User with UID 'user_abc' can create a wound image under /users/user_abc/wounds/{woundId}/images/{imageId}.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete wound images under /users/user_abc/wounds/{woundId}/images/{imageId}.
     * @deny (create) - User with UID 'user_def' cannot create a wound image under /users/user_abc/wounds/{woundId}/images/{imageId}.
     * @deny (get, list, update, delete) - User with UID 'user_def' cannot read, list, update, or delete wound images under /users/user_abc/wounds/{woundId}/images/{imageId}.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      // Function to check if the request is from the owner of the user profile.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the request is from the owner of an existing user profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to appointment information for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User with UID 'user_abc' can create an appointment under /users/user_abc/appointments/{appointmentId}.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete appointments under /users/user_abc/appointments/{appointmentId}.
     * @deny (create) - User with UID 'user_def' cannot create an appointment under /users/user_abc/appointments/{appointmentId}.
     * @deny (get, list, update, delete) - User with UID 'user_def' cannot read, list, update, or delete appointments under /users/user_abc/appointments/{appointmentId}.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      // Function to check if the request is from the owner of the user profile.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the request is from the owner of an existing user profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages access to risk assessments for a specific wound, associated with a user.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) - User with UID 'user_abc' can create a risk assessment under /users/user_abc/wounds/{woundId}/riskAssessments/{riskAssessmentId}.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, list, update, and delete risk assessments under /users/user_abc/wounds/{woundId}/riskAssessments/{riskAssessmentId}.
     * @deny (create) - User with UID 'user_def' cannot create a risk assessment under /users/user_abc/wounds/{woundId}/riskAssessments/{riskAssessmentId}.
     * @deny (get, list, update, delete) - User with UID 'user_def' cannot read, list, update, or delete risk assessments under /users/user_abc/wounds/{woundId}/riskAssessments/{riskAssessmentId}.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      // Function to check if the request is from the owner of the user profile.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Function to check if the request is from the owner of an existing user profile.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}