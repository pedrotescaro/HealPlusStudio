rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) Allow a user to create their own profile if the userId matches their auth.uid.
     * @allow (get, list, update, delete) Allow the user to read, update, and delete their own profile.
     * @deny (create) Deny creating a user profile if the userId does not match the auth.uid.
     * @deny (get, list, update, delete) Deny access to other users' profiles.
     * @principle Enforces document ownership for all operations on the UserProfile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Listing users is not permitted.

      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to wound information for a specific user.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) Allow a user to create a wound under their profile.
     * @allow (get, list, update, delete) Allow the user to read, update, and delete their own wound data.
     * @deny (create) Deny creating a wound if the userId does not match the auth.uid.
     * @deny (get, list, update, delete) Deny access to other users' wound data.
     * @principle Enforces document ownership for all operations on Wound documents.
     */
    match /users/{userId}/wounds/{woundId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to wound images associated with a specific wound for a user.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) Allow a user to create a wound image under their wound.
     * @allow (get, list, update, delete) Allow the user to read, update, and delete their own wound image data.
     * @deny (create) Deny creating a wound image if the userId does not match the auth.uid.
     * @deny (get, list, update, delete) Deny access to other users' wound image data.
     * @principle Enforces document ownership for all operations on WoundImage documents.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to appointment information for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) Allow a user to create an appointment under their profile.
     * @allow (get, list, update, delete) Allow the user to read, update, and delete their own appointment data.
     * @deny (create) Deny creating an appointment if the userId does not match the auth.uid.
     * @deny (get, list, update, delete) Deny access to other users' appointment data.
     * @principle Enforces document ownership for all operations on Appointment documents.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to risk assessments for a specific wound, associated with a user.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) Allow a user to create a risk assessment under their wound.
     * @allow (get, list, update, delete) Allow the user to read, update, and delete their own risk assessment data.
     * @deny (create) Deny creating a risk assessment if the userId does not match the auth.uid.
     * @deny (get, list, update, delete) Deny access to other users' risk assessment data.
     * @principle Enforces document ownership for all operations on RiskAssessment documents.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}