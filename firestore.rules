/**
 * @file HealPlus Firestore Security Rules
 * @corePhilosophy This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data. All data is nested under /users/{userId}, providing a clear and secure path-based ownership structure.
 * @dataStructure All data is nested under `/users/{userId}`, including user profiles, wounds, wound images, appointments, and risk assessments. This hierarchical structure simplifies security rules and enforces clear ownership.
 * @keySecurityDecisions Listing of user profiles is disallowed. All read and write operations are scoped to the authenticated user's ID. No public read access is granted.
 * @denormalizationForAuthorization No denormalization is used, as path-based ownership provides sufficient security and simplifies rules.
 * @structuralSegregation All user data is stored under the user's ID, ensuring complete segregation and preventing unauthorized access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile data, ensuring only the owner can read and write.
     * @path /users/{userId}
     * @allow (create) User with ID "user123" can create their profile.
     * @allow (get, update, delete) User with ID "user123" can read, update, or delete their profile.
     * @deny (create, get, update, delete) User with ID "user456" cannot access user "user123"'s profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages wound data, restricting access to the owner.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) User "user123" can create a wound under their profile.
     * @allow (get, update, delete) User "user123" can read, update, or delete their wound.
     * @deny (create, get, update, delete) User "user456" cannot access wounds under user "user123"'s profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to wound images, ensuring owner-only access.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) User "user123" can create a wound image under their wound.
     * @allow (get, update, delete) User "user123" can read, update, or delete their wound image.
     * @deny (create, get, update, delete) User "user456" cannot access wound images under user "user123"'s profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Secures appointment data, allowing only the owner to manage it.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User "user123" can create an appointment under their profile.
     * @allow (get, update, delete) User "user123" can read, update, or delete their appointment.
     * @deny (create, get, update, delete) User "user456" cannot access appointments under user "user123"'s profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Protects risk assessment data, ensuring owner-only access.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) User "user123" can create a risk assessment under their wound.
     * @allow (get, update, delete) User "user123" can read, update, or delete their risk assessment.
     * @deny (create, get, update, delete) User "user456" cannot access risk assessments under user "user123"'s profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}