rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects UserProfile documents, ensuring only the owner can read and write.
     * @path /users/{userId}
     * @allow (create) User with matching {userId} can create their profile.
     * @allow (get, update, delete) User with matching {userId} can read, update, and delete their profile.
     * @deny (create) User attempts to create a profile with a mismatched {userId}.
     * @deny (get, update, delete) User attempts to read, update, or delete a profile with a mismatched {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects Wound documents, ensuring only the owner can read and write.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) User with matching {userId} can create a wound.
     * @allow (get, update, delete) User with matching {userId} can read, update, and delete their wounds.
     * @deny (create) User attempts to create a wound with a mismatched {userId}.
     * @deny (get, update, delete) User attempts to read, update, or delete wounds with a mismatched {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects WoundImage documents, ensuring only the owner can read and write.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) User with matching {userId} can create a wound image.
     * @allow (get, update, delete) User with matching {userId} can read, update, and delete their wound images.
     * @deny (create) User attempts to create a wound image with a mismatched {userId}.
     * @deny (get, update, delete) User attempts to read, update, or delete wound images with a mismatched {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects Appointment documents, ensuring only the owner can read and write.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User with matching {userId} can create an appointment.
     * @allow (get, update, delete) User with matching {userId} can read, update, and delete their appointments.
     * @deny (create) User attempts to create an appointment with a mismatched {userId}.
     * @deny (get, update, delete) User attempts to read, update, or delete appointments with a mismatched {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects RiskAssessment documents, ensuring only the owner can read and write.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) User with matching {userId} can create a risk assessment.
     * @allow (get, update, delete) User with matching {userId} can read, update, and delete their risk assessments.
     * @deny (create) User attempts to create a risk assessment with a mismatched {userId}.
     * @deny (get, update, delete) User attempts to read, update, or delete risk assessments with a mismatched {userId}.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}