/**
 * @file Firebase Security Rules for HealPlus Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user has full control over their own profile and associated data (wounds, images, appointments, risk assessments).
 * @data_structure All data is nested under /users/{userId}, ensuring clear ownership and simplifies security rules. This structure inherently supports the QAPs (Rules Are Not Filters) principle.
 * @key_security_decisions
 *   - Users can only access their own data.
 *   - User listing is disallowed for privacy.
 *   - Data validation is limited to ownership and relational integrity, focusing on authorization.
 *
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for UserProfile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with matching userId can create their profile.
     * @allow (get, update, delete) - Authenticated user with matching userId can read, update, or delete their profile.
     * @deny (create) - Authenticated user attempts to create a profile with a mismatched userId.
     * @deny (get, update, delete) - Authenticated user attempts to read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for Wound documents.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) - Authenticated user with matching userId can create a wound document.
     * @allow (get, update, delete) - Authenticated user with matching userId can read, update, or delete a wound document.
     * @deny (create) - Authenticated user attempts to create a wound document with a mismatched userId.
     * @deny (get, update, delete) - Authenticated user attempts to read, update, or delete another user's wound document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for WoundImage documents.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) - Authenticated user with matching userId can create a wound image document.
     * @allow (get, update, delete) - Authenticated user with matching userId can read, update, or delete a wound image document.
     * @deny (create) - Authenticated user attempts to create a wound image document with a mismatched userId.
     * @deny (get, update, delete) - Authenticated user attempts to read, update, or delete another user's wound image document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for Appointment documents.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - Authenticated user with matching userId can create an appointment document.
     * @allow (get, update, delete) - Authenticated user with matching userId can read, update, or delete an appointment document.
     * @deny (create) - Authenticated user attempts to create an appointment document with a mismatched userId.
     * @deny (get, update, delete) - Authenticated user attempts to read, update, or delete another user's appointment document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Enforces user-ownership for RiskAssessment documents.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) - Authenticated user with matching userId can create a risk assessment document.
     * @allow (get, update, delete) - Authenticated user with matching userId can read, update, or delete a risk assessment document.
     * @deny (create) - Authenticated user attempts to create a risk assessment document with a mismatched userId.
     * @deny (get, update, delete) - Authenticated user attempts to read, update, or delete another user's risk assessment document.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}