rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure root access. Listing all collections is disallowed.
     * @path /databases/{database}/documents
     * @allow (get) Always denied
     * @deny (list) Always denied
     * @principle Prevents unauthorized access to the root of the database.
     */
    match / {
      allow get: if false;
      allow list: if false;
    }

    /**
     * @description Enforces user-ownership for profiles. Only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @allow (get) Authenticated user can get their own profile.
     * @allow (update) Authenticated user can update their own profile.
     * @allow (delete) Authenticated user can delete their own profile.
     * @deny (create) Non-authenticated user can't create a profile.
     * @deny (get) Another user can't read this profile.
     * @deny (update) Another user can't update this profile.
     * @deny (delete) Another user can't delete this profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && exists(resource);
    }

    /**
     * @description Enforces user-ownership for wounds. Only the authenticated user can read/write their own wounds.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) Authenticated user can create a wound under their profile.
     * @allow (get) Authenticated user can get a wound under their profile.
     * @allow (update) Authenticated user can update a wound under their profile.
     * @allow (delete) Authenticated user can delete a wound under their profile.
     * @deny (create) Non-authenticated user can't create a wound.
     * @deny (get) Another user can't read this wound.
     * @deny (update) Another user can't update this wound.
     * @deny (delete) Another user can't delete this wound.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && exists(resource);
    }

    /**
     * @description Enforces user-ownership for wound images. Only the authenticated user can read/write their own wound images.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) Authenticated user can create a wound image under their wound.
     * @allow (get) Authenticated user can get a wound image under their wound.
     * @allow (update) Authenticated user can update a wound image under their wound.
     * @allow (delete) Authenticated user can delete a wound image under their wound.
     * @deny (create) Non-authenticated user can't create a wound image.
     * @deny (get) Another user can't read this wound image.
     * @deny (update) Another user can't update this wound image.
     * @deny (delete) Another user can't delete this wound image.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && exists(resource);
    }

    /**
     * @description Enforces user-ownership for appointments. Only the authenticated user can read/write their own appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) Authenticated user can create an appointment under their profile.
     * @allow (get) Authenticated user can get an appointment under their profile.
     * @allow (update) Authenticated user can update an appointment under their profile.
     * @allow (delete) Authenticated user can delete an appointment under their profile.
     * @deny (create) Non-authenticated user can't create an appointment.
     * @deny (get) Another user can't read this appointment.
     * @deny (update) Another user can't update this appointment.
     * @deny (delete) Another user can't delete this appointment.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/appointments/{appointmentId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && exists(resource);
    }

     /**
      * @description Enforces user-ownership for risk assessments. Only the authenticated user can read/write risk assessments for their own wounds.
      * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
      * @allow (create) Authenticated user can create a risk assessment for their wound.
      * @allow (get) Authenticated user can get a risk assessment for their wound.
      * @allow (update) Authenticated user can update a risk assessment for their wound.
      * @allow (delete) Authenticated user can delete a risk assessment for their wound.
      * @deny (create) Non-authenticated user can't create a risk assessment.
      * @deny (get) Another user can't read this risk assessment.
      * @deny (update) Another user can't update this risk assessment.
      * @deny (delete) Another user can't delete this risk assessment.
      * @principle Enforces document ownership for all operations.
      */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId) && exists(resource);
    }

    /**
     * @description Helper function to check if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to check if the authenticated user is the owner of the resource.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}