/**
 * @file Firestore Security Rules for HealPlus Application
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model. Each user
 * can only access their own profile information, wounds, wound images, appointments,
 * and risk assessments.
 *
 * @data_structure All data is nested under /users/{userId}, ensuring a clear
 * hierarchy of ownership. Wounds, wound images, appointments, and risk assessments
 * are stored as subcollections under the user's document.
 *
 * @key_security_decisions
 *   - Listing other users' data is disallowed.
 *   - All write operations require the user to be the owner of the data.
 *   - No complex data validation is performed in this prototyping phase, focusing on
 *     authorization.
 *
 * @denormalization_for_authorization Not applicable. Path-based authorization is sufficient.
 * @structural_segregation Not applicable. All data is private and user-specific.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profile information.
     * @path /users/{userId}
     * @allow (create) Allow a user to create their own profile if the userId matches their auth UID.
     * @allow (get, update, delete) Allow a user to read, update, or delete their own profile.
     * @deny (create) Deny creating a profile with a userId that doesn't match the auth UID.
     * @deny (get, update, delete) Deny access to other users' profiles.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      // Self-creation: Only allow creating if the authenticated user's ID matches the document ID
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;

      // On Update: Enforce that the ownership field is immutable. This prevents the ownership link from ever being changed.
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to wound information for a specific user.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create, get, list, update, delete) Allow a user to manage their own wound data.
     * @deny (create, get, list, update, delete) Deny access to other users' wound data.
     * @principle Enforces document ownership for all operations on wound data.
     */
    match /users/{userId}/wounds/{woundId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to wound images associated with a specific wound for a user.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create, get, list, update, delete) Allow a user to manage their own wound images.
     * @deny (create, get, list, update, delete) Deny access to other users' wound images.
     * @principle Enforces document ownership for all operations on wound image data.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);

      allow update: if isExistingOwner(userId);

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to appointment information for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create, get, list, update, delete) Allow a user to manage their own appointment data.
     * @deny (create, get, list, update, delete) Deny access to other users' appointment data.
     * @principle Enforces document ownership for all operations on appointment data.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;

      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to risk assessments for a specific wound, associated with a user.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create, get, list, update, delete) Allow a user to manage their own risk assessment data.
     * @deny (create, get, list, update, delete) Deny access to other users' risk assessment data.
     * @principle Enforces document ownership for all operations on risk assessment data.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn() && isOwner(userId);

      allow update: if isExistingOwner(userId);

      allow delete: if isExistingOwner(userId);
    }
  }
}