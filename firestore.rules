/**
 * @file Firestore Security Rules for HealPlus Application
 * @version Prototyping Mode - Data shape is not strictly validated.
 *
 * @description This ruleset enforces a strict user-ownership model. Each user has full control over their profile and associated data (wounds, images, appointments, and risk assessments).
 *
 * @dataStructure
 * - /users/{userId}: User profile information.
 * - /users/{userId}/wounds/{woundId}: Wound details for a user.
 * - /users/{userId}/wounds/{woundId}/images/{imageId}: Images associated with a specific wound.
 * - /users/{userId}/appointments/{appointmentId}: Appointments scheduled by a user.
 * - /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}: Risk assessments for a specific wound.
 *
 * @keySecurityDecisions
 * - User listing is explicitly disallowed.
 * - All data is nested under /users/{userId}, enforcing strict user ownership.
 * - No data shape validation is performed, outside of relational integrity on create/update operations.
 *
 * @denormalizationForAuthorization
 * - Not required.  The Firestore structure is designed to leverage path-based authorization, eliminating the need for denormalization.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profile information. Only the owner can read, update, or delete their profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create a profile at /users/user123.
     * @allow (get, update, delete) User with ID 'user123' can access their profile at /users/user123.
     * @deny (create) User with ID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) User with ID 'user456' cannot access the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects wound data. Only the owner of the user profile can manage their wounds.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) User with ID 'user123' can create a wound at /users/user123/wounds/wound456.
     * @allow (get, list, update, delete) User with ID 'user123' can access their wounds at /users/user123/wounds/wound456.
     * @deny (create) User with ID 'user456' cannot create a wound at /users/user123/wounds/wound456.
     * @deny (get, list, update, delete) User with ID 'user456' cannot access the wound at /users/user123/wounds/wound456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wounds/{woundId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects wound image data. Only the owner of the user profile can manage wound images.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) User with ID 'user123' can create an image at /users/user123/wounds/wound456/images/image789.
     * @allow (get, list, update, delete) User with ID 'user123' can access their images at /users/user123/wounds/wound456/images/image789.
     * @deny (create) User with ID 'user456' cannot create an image at /users/user123/wounds/wound456/images/image789.
     * @deny (get, list, update, delete) User with ID 'user456' cannot access the image at /users/user123/wounds/wound456/images/image789.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects appointment data. Only the owner of the user profile can manage their appointments.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) User with ID 'user123' can create an appointment at /users/user123/appointments/appt456.
     * @allow (get, list, update, delete) User with ID 'user123' can access their appointments at /users/user123/appointments/appt456.
     * @deny (create) User with ID 'user456' cannot create an appointment at /users/user123/appointments/appt456.
     * @deny (get, list, update, delete) User with ID 'user456' cannot access the appointment at /users/user123/appointments/appt456.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/appointments/{appointmentId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects risk assessment data. Only the owner of the user profile can manage risk assessments for their wounds.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) User with ID 'user123' can create a risk assessment at /users/user123/wounds/wound456/riskAssessments/risk789.
     * @allow (get, list, update, delete) User with ID 'user123' can access their risk assessments at /users/user123/wounds/wound456/riskAssessments/risk789.
     * @deny (create) User with ID 'user456' cannot create a risk assessment at /users/user123/wounds/wound456/riskAssessments/risk789.
     * @deny (get, list, update, delete) User with ID 'user456' cannot access the risk assessment at /users/user123/wounds/wound456/riskAssessments/risk789.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the requesting user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return request.auth.uid == userId && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}