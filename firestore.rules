/**
 * @description This ruleset enforces a strict user-ownership model for the HealPlus application.
 * All data is nested under /users/{userId}, ensuring that only the authenticated user can
 * access their own profile and associated data.
 * @dataStructure
 * - /users/{userId}: UserProfile data
 * - /users/{userId}/wounds/{woundId}: Wound data
 * - /users/{userId}/wounds/{woundId}/images/{imageId}: WoundImage data
 * - /users/{userId}/appointments/{appointmentId}: Appointment data
 * - /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}: RiskAssessment data
 * @keySecurityDecisions
 * - Users can only access their own data; no listing of all users is allowed.
 * - Data validation is relaxed in this prototype, focusing on authorization.
 * - The hierarchical data structure simplifies authorization checks via path-based rules.
 * - No denormalization is required, as the path encodes the user ID and resource relationships.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the UserProfile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     *   auth.uid: "user123"
     *   request.resource.data.id: "user123"
     * @deny (create) User attempts to create a profile with a mismatched ID.
     *   auth.uid: "user123"
     *   request.resource.data.id: "user456"
     * @allow (get, list, update, delete) Authenticated user can access their own profile.
     *   auth.uid: "user123"
     *   userId: "user123"
     * @deny (get, list, update, delete) User attempts to access another user's profile.
     *   auth.uid: "user123"
     *   userId: "user456"
     * @principle Enforces document ownership for writes and reads, validating path consistency.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to Wound documents for a specific user.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) Authenticated user can create wound documents under their profile.
     *   auth.uid: "user123"
     *   userId: "user123"
     * @deny (create) User attempts to create a wound document under another user's profile.
     *   auth.uid: "user123"
     *   userId: "user456"
     * @allow (get, list, update, delete) Authenticated user can access their own wound documents.
     *   auth.uid: "user123"
     *   userId: "user123"
     * @deny (get, list, update, delete) User attempts to access another user's wound documents.
     *   auth.uid: "user123"
     *   userId: "user456"
     * @principle Enforces document ownership for writes and reads, restricting access to a user's own data tree.
     */
    match /users/{userId}/wounds/{woundId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to WoundImage documents for a specific wound of a specific user.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) Authenticated user can create wound image documents under their profile and wound.
     *   auth.uid: "user123"
     *   userId: "user123"
     *   woundId: "wound456"
     * @deny (create) User attempts to create a wound image document under another user's profile or wound.
     *   auth.uid: "user123"
     *   userId: "user456"
     *   woundId: "wound789"
     * @allow (get, list, update, delete) Authenticated user can access their own wound image documents.
     *   auth.uid: "user123"
     *   userId: "user123"
     *   woundId: "wound456"
     * @deny (get, list, update, delete) User attempts to access another user's wound image documents.
     *   auth.uid: "user123"
     *   userId: "user456"
     *   woundId: "wound789"
     * @principle Enforces document ownership for writes and reads, restricting access to a user's own data tree.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to Appointment documents for a specific user.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) Authenticated user can create appointment documents under their profile.
     *   auth.uid: "user123"
     *   userId: "user123"
     * @deny (create) User attempts to create an appointment document under another user's profile.
     *   auth.uid: "user123"
     *   userId: "user456"
     * @allow (get, list, update, delete) Authenticated user can access their own appointment documents.
     *   auth.uid: "user123"
     *   userId: "user123"
     * @deny (get, list, update, delete) User attempts to access another user's appointment documents.
     *   auth.uid: "user123"
     *   userId: "user456"
     * @principle Enforces document ownership for writes and reads, restricting access to a user's own data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to RiskAssessment documents for a specific wound of a specific user.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) Authenticated user can create risk assessment documents under their profile and wound.
     *   auth.uid: "user123"
     *   userId: "user123"
     *   woundId: "wound456"
     * @deny (create) User attempts to create a risk assessment document under another user's profile or wound.
     *   auth.uid: "user123"
     *   userId: "user456"
     *   woundId: "wound789"
     * @allow (get, list, update, delete) Authenticated user can access their own risk assessment documents.
     *   auth.uid: "user123"
     *   userId: "user123"
     *   woundId: "wound456"
     * @deny (get, list, update, delete) User attempts to access another user's risk assessment documents.
     *   auth.uid: "user123"
     *   userId: "user456"
     *   woundId: "wound789"
     * @principle Enforces document ownership for writes and reads, restricting access to a user's own data tree.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
        function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}