rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profiles. Users can only read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can get, update, and delete their own profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile for user 'user123' at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot get, update, or delete user 'user123's profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to wounds. Users can only read and write wounds associated with their profile.
     * @path /users/{userId}/wounds/{woundId}
     * @allow (create) - User 'user123' can create a wound under their profile at /users/user123/wounds/wound456.
     * @allow (get, update, delete) - User 'user123' can get, update, and delete their own wound at /users/user123/wounds/wound456.
     * @allow (list) - User 'user123' can list wounds associated with their profile.
     * @deny (create) - User 'user456' cannot create a wound for user 'user123' at /users/user123/wounds/wound456.
     * @deny (get, update, delete) - User 'user456' cannot get, update, or delete user 'user123's wound at /users/user123/wounds/wound456.
     * @principle Enforces document ownership for all operations within the user's data tree.
     */
    match /users/{userId}/wounds/{woundId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to wound images. Users can only read and write images associated with their wounds.
     * @path /users/{userId}/wounds/{woundId}/images/{imageId}
     * @allow (create) - User 'user123' can create an image for their wound at /users/user123/wounds/wound456/images/image789.
     * @allow (get, update, delete) - User 'user123' can get, update, and delete their own wound image.
     * @allow (list) - User 'user123' can list images for their wound.
     * @deny (create) - User 'user456' cannot create an image for user 'user123's wound.
     * @deny (get, update, delete) - User 'user456' cannot get, update, or delete user 'user123's wound image.
     * @principle Enforces document ownership for all operations within the user's data tree.
     */
    match /users/{userId}/wounds/{woundId}/images/{imageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to appointments. Users can only read and write appointments associated with their profile.
     * @path /users/{userId}/appointments/{appointmentId}
     * @allow (create) - User 'user123' can create an appointment under their profile at /users/user123/appointments/appt456.
     * @allow (get, update, delete) - User 'user123' can get, update, and delete their own appointment.
     * @allow (list) - User 'user123' can list appointments associated with their profile.
     * @deny (create) - User 'user456' cannot create an appointment for user 'user123'.
     * @deny (get, update, delete) - User 'user456' cannot get, update, or delete user 'user123's appointment.
     * @principle Enforces document ownership for all operations within the user's data tree.
     */
    match /users/{userId}/appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Secure access to risk assessments. Users can only read and write risk assessments associated with their wounds.
     * @path /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}
     * @allow (create) - User 'user123' can create a risk assessment for their wound.
     * @allow (get, update, delete) - User 'user123' can get, update, and delete their own risk assessment.
     * @allow (list) - User 'user123' can list risk assessments for their wound.
     * @deny (create) - User 'user456' cannot create a risk assessment for user 'user123's wound.
     * @deny (get, update, delete) - User 'user456' cannot get, update, or delete user 'user123's risk assessment.
     * @principle Enforces document ownership for all operations within the user's data tree.
     */
    match /users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}