{
  "entities": {
    "UserProfile": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserProfile",
      "type": "object",
      "description": "Represents a user profile in the HealPlus application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user profile."
        },
        "firstName": {
          "type": "string",
          "description": "User's first name."
        },
        "lastName": {
          "type": "string",
          "description": "User's last name."
        },
        "email": {
          "type": "string",
          "description": "User's email address.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "User's phone number."
        }
      },
      "required": [
        "id",
        "firstName",
        "lastName",
        "email"
      ]
    },
    "Wound": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Wound",
      "type": "object",
      "description": "Represents a wound being tracked by the user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the wound."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the UserProfile who is tracking this wound. (Relationship: UserProfile 1:N Wound)"
        },
        "name": {
          "type": "string",
          "description": "Name or description of the wound."
        },
        "location": {
          "type": "string",
          "description": "Location of the wound on the body."
        },
        "dateCreated": {
          "type": "string",
          "description": "Date when the wound was first recorded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "name",
        "location",
        "dateCreated"
      ]
    },
    "WoundImage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WoundImage",
      "type": "object",
      "description": "Represents an image associated with a wound.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the wound image."
        },
        "woundId": {
          "type": "string",
          "description": "Reference to the Wound this image belongs to. (Relationship: Wound 1:N WoundImage)"
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the wound image."
        },
        "uploadDate": {
          "type": "string",
          "description": "Date when the image was uploaded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "woundId",
        "imageUrl",
        "uploadDate"
      ]
    },
    "Appointment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Appointment",
      "type": "object",
      "description": "Represents a scheduled appointment with a healthcare provider.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the appointment."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the UserProfile who scheduled the appointment. (Relationship: UserProfile 1:N Appointment)"
        },
        "providerName": {
          "type": "string",
          "description": "Name of the healthcare provider."
        },
        "appointmentDateTime": {
          "type": "string",
          "description": "Date and time of the appointment.",
          "format": "date-time"
        },
        "notes": {
          "type": "string",
          "description": "Additional notes about the appointment."
        }
      },
      "required": [
        "id",
        "userId",
        "providerName",
        "appointmentDateTime"
      ]
    },
    "RiskAssessment": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RiskAssessment",
      "type": "object",
      "description": "Represents a risk assessment for a wound, potentially generated by AI.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the risk assessment."
        },
        "woundId": {
          "type": "string",
          "description": "Reference to the Wound this assessment is for. (Relationship: Wound 1:1 RiskAssessment)"
        },
        "assessmentDate": {
          "type": "string",
          "description": "Date when the risk assessment was performed.",
          "format": "date-time"
        },
        "riskLevel": {
          "type": "string",
          "description": "The level of risk identified (e.g., Low, Medium, High)."
        },
        "recommendations": {
          "type": "string",
          "description": "Recommendations based on the risk assessment."
        }
      },
      "required": [
        "id",
        "woundId",
        "assessmentDate",
        "riskLevel",
        "recommendations"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous",
      "google.com",
      "apple.com",
      "microsoft.com"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "UserProfile",
          "schema": {
            "$ref": "#/backend/entities/UserProfile"
          },
          "description": "Stores user profile information.  No denormalization is required as this is the root user document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/wounds/{woundId}",
        "definition": {
          "entityName": "Wound",
          "schema": {
            "$ref": "#/backend/entities/Wound"
          },
          "description": "Stores wound information for a specific user. Path-based ownership enforced through the userId parameter.  No denormalization required.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "woundId",
              "description": "The unique identifier for the wound."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/wounds/{woundId}/images/{imageId}",
        "definition": {
          "entityName": "WoundImage",
          "schema": {
            "$ref": "#/backend/entities/WoundImage"
          },
          "description": "Stores images associated with a specific wound for a user. Path-based ownership through userId and woundId parameters. No denormalization required.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "woundId",
              "description": "The unique identifier for the wound."
            },
            {
              "name": "imageId",
              "description": "The unique identifier for the wound image."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/appointments/{appointmentId}",
        "definition": {
          "entityName": "Appointment",
          "schema": {
            "$ref": "#/backend/entities/Appointment"
          },
          "description": "Stores appointment information for a specific user. Path-based ownership through userId parameter. No denormalization required.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "appointmentId",
              "description": "The unique identifier for the appointment."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}",
        "definition": {
          "entityName": "RiskAssessment",
          "schema": {
            "$ref": "#/backend/entities/RiskAssessment"
          },
          "description": "Stores risk assessments for a specific wound, associated with a user. Path-based ownership. No denormalization is required.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "woundId",
              "description": "The unique identifier for the wound."
            },
            {
              "name": "riskAssessmentId",
              "description": "The unique identifier for the risk assessment."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to ensure authorization independence, clarity, and scalability. User profiles and their associated data (wounds, images, appointments, and risk assessments) are organized under user-specific paths to enforce clear ownership and simplify security rules. This approach eliminates the need for complex `get()` calls in security rules, ensuring atomic operations and easier debugging.\n\nSpecifically:\n\n*   **UserProfile**: Stored under `/users/{userId}`.  This provides a clear path-based ownership model. No denormalization is needed as it is the root of the user's data.\n*   **Wound**: Stored under `/users/{userId}/wounds/{woundId}`. Path-based ownership; no denormalization needed because the parent user ID is already present in the path.\n*   **WoundImage**: Stored under `/users/{userId}/wounds/{woundId}/images/{imageId}`.  Continues path-based ownership from `UserProfile` to `Wound` to `WoundImage`.  No denormalization is needed.\n*   **Appointment**: Stored under `/users/{userId}/appointments/{appointmentId}`.  Path-based ownership. No denormalization needed.\n*   **RiskAssessment**: Stored under `/users/{userId}/wounds/{woundId}/riskAssessments/{riskAssessmentId}`.  Continues path-based ownership. No denormalization is needed.\n\nThis structure inherently supports the QAPs (Rules Are Not Filters) principle because list operations are always scoped to a specific user's data.  Listing wounds, images, appointments, or risk assessments will always be under a user's path, meaning security rules can efficiently and securely filter data based on `request.auth.uid` without needing to filter data based on content."
  }
}
